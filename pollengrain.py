# -*- coding: utf-8 -*-
"""PollenGrain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vMGMqdzqkEGmNBorUeeNEWXn_cEyykV1
"""

import os
import pandas as pd
import tensorflow as tf
import numpy as np
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import pickle

# Step 1: Define image directory
image_dir = "/content/PollenGrains.zip"

# Step 2: Extract labels from filenames
file_list = os.listdir(image_dir)
data = []

for filename in file_list:
    if filename.endswith('.jpg') or filename.endswith('.png'):
        label = filename.split('_')[0]
        data.append((os.path.join(image_dir, filename), label))

df = pd.DataFrame(data, columns=['filename', 'label'])

# Step 2.5: Filter out classes with <2 samples
label_counts = df['label'].value_counts()
df = df[df['label'].isin(label_counts[label_counts >= 2].index)]

# Step 3: Train-test split
train_df, val_df = train_test_split(df, test_size=0.2, stratify=df['label'], random_state=42)

# Step 4: Data augmentation
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=15,
    width_shift_range=0.1,
    height_shift_range=0.1,
    shear_range=0.1,
    zoom_range=0.1,
    horizontal_flip=True,
    fill_mode='nearest'
)

val_datagen = ImageDataGenerator(rescale=1./255)

train_gen = train_datagen.flow_from_dataframe(
    dataframe=train_df,
    x_col='filename',
    y_col='label',
    target_size=(224, 224),
    batch_size=32,
    class_mode='sparse'
)

val_gen = val_datagen.flow_from_dataframe(
    dataframe=val_df,
    x_col='filename',
    y_col='label',
    target_size=(224, 224),
    batch_size=32,
    class_mode='sparse'
)

# Step 5: Build model
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
base_model.trainable = True  # Unfreeze for fine-tuning

# Fine-tune last 50 layers
for layer in base_model.layers[:-50]:
    layer.trainable = False

x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(128, activation='relu')(x)
x = Dropout(0.3)(x)
num_classes = np.max(train_gen.classes) + 1
output = Dense(num_classes, activation='softmax')(x)
model = Model(inputs=base_model.input, outputs=output)

# Step 6: Compile
model.compile(optimizer=Adam(1e-4), loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Callbacks
early_stop = EarlyStopping(monitor='val_loss', patience=4, restore_best_weights=True)
checkpoint = ModelCheckpoint('best_model.keras', monitor='val_accuracy', save_best_only=True)

# Step 7: Train
history = model.fit(
    train_gen,
    validation_data=val_gen,
    epochs=15,
    callbacks=[early_stop, checkpoint]
)

# Step 8: Plot
plt.plot(history.history['accuracy'], label='Train')
plt.plot(history.history['val_accuracy'], label='Val')
plt.legend()
plt.title("Improved Pollen Classifier Accuracy")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.show()

# Step 9: Save final model
model.save("final_pollen_classifier_model.keras")
print("âœ… Final model saved as 'final_pollen_classifier_model.keras'")

# Save class_indices for Flask app
with open('class_indices.pkl', 'wb') as f:
    pickle.dump(train_gen.class_indices, f)
print("âœ… Class indices saved as 'class_indices.pkl'")



from tensorflow.keras.preprocessing import image
import numpy as np
import os

# Reverse class_indices to map index â†’ class name
class_indices = train_gen.class_indices
index_to_class = {v: k for k, v in class_indices.items()}

def predict_image(path):
    # Load and preprocess image
    img = image.load_img(path, target_size=(224, 224))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    # Predict
    prediction = model.predict(img_array)
    predicted_class_idx = np.argmax(prediction, axis=1)[0]
    predicted_class_name = index_to_class[predicted_class_idx]

    # Extract true label from filename (e.g., 'anadenanthera_45.jpg' â†’ 'anadenanthera')
    filename = os.path.basename(path)
    actual_class_name = filename.split('_')[0]

    print(f"âœ… Actual: {actual_class_name}, ðŸ”® Predicted: {predicted_class_name}")

predict_image("/content/PollenGrains/protium_02.jpg")

from google.colab import drive
drive.mount('/content/drive')

model.save('final_pollen_classifier_model.keras')